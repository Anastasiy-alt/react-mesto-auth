{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _check(res) {\n    if (res.ok) {\n      return res.json();\n    } // если ошибка, отклоняем промис\n\n\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: 'GET'\n    }).then(res => this._check(res));\n  }\n\n  addInitialCards(cardData) {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n      method: 'POST',\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(res => this._check(res));\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n      method: 'GET'\n    }).then(res => this._check(res));\n  }\n\n  setUserInfo(userData) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: userData.name,\n        about: userData.about\n      })\n    }).then(res => this._check(res));\n  }\n\n  addCard(cardData) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(res => this._check(res));\n  }\n\n  setUserAvatar(userData) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      headers: this._headers,\n      method: 'PATCH',\n      body: JSON.stringify({\n        avatar: userData.avatar\n      })\n    }).then(res => this._check(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._check(res));\n  }\n\n  putLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._check(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._check(res));\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: `${!isLiked ? 'DELETE' : 'PUT'}`,\n      headers: this._headers\n    }).then(res => this._check(res));\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-46',\n  headers: {\n    authorization: '4ab555e1-39a0-48e6-8593-6e8a4a84e28f',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_check","res","ok","json","Promise","reject","status","getInitialCards","fetch","method","then","addInitialCards","cardData","body","JSON","stringify","name","link","getUserInfo","setUserInfo","userData","about","addCard","setUserAvatar","avatar","deleteCard","cardId","putLike","deleteLike","changeLikeCardStatus","isLiked","api","authorization"],"sources":["/Users/anastasiavolokitina/Documents/GitHub/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n        this._baseUrl = options.baseUrl;\n        this._headers = options.headers;\n    }\n\n    _check(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        // если ошибка, отклоняем промис\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,\n            method: 'GET'\n        })\n            .then(res => this._check(res))\n    }\n\n    addInitialCards(cardData) {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: this._headers,\n            method: 'POST',\n            body: JSON.stringify({\n                name: cardData.name,\n                link: cardData.link\n            })\n        })\n            .then(res => this._check(res))\n\n    }\n    getUserInfo() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers,\n            method: 'GET'\n        })\n            .then(res => this._check(res))\n    }\n\n    setUserInfo(userData) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify({\n                name: userData.name,\n                about: userData.about\n            })\n        })\n            .then(res => this._check(res))\n    }\n\n    addCard(cardData) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name: cardData.name,\n                link: cardData.link\n            })\n        })\n            .then(res => this._check(res));\n    }\n\n    setUserAvatar(userData) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify({\n                avatar: userData.avatar\n            })\n        })\n            .then(res => this._check(res))\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._check(res))\n    }\n\n    putLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n            .then(res => this._check(res))\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n            .then(res => this._check(res))\n    }\n\n    changeLikeCardStatus(cardId, isLiked) {\n        return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n          method: `${!isLiked ? 'DELETE' : 'PUT'}`,\n          headers: this._headers\n        })\n          .then(res => this._check(res));\n      }\n\n}\n\nconst api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-46',\n    headers: {\n        authorization: '4ab555e1-39a0-48e6-8593-6e8a4a84e28f',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module"}